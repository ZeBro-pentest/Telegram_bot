import time
from datetime import datetime
from telebot import types
from utils.helpers import main_menu, thank_menu, is_thank_message
from utils.storage import save_thank, save_user

# üß† –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_attempts = {}
last_messages = {}

def register_thank_handlers(bot):
    @bot.message_handler(commands=['thank'])
    def thank_cmd(message):
        ask_for_thank(message)

    @bot.message_handler(func=lambda m: m.text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å")
    def ask_for_thank(message):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_user(message.from_user.id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        bot.send_message(
            message.chat.id,
            """üìú <b>–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∏—Å—å–º–∞ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω–∏—è:</b>

–í–∞—à —Ç–µ–∫—Å—Ç –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω–∏—è:
‚Äî---------------------------------------------------------------

–§–ò–û (–ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ)
‚úèÔ∏è –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º 400

–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /exit –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üö´ –û—Ç–º–µ–Ω–∏—Ç—å¬ª.
""",
            parse_mode='HTML',
            reply_markup=thank_menu()
        )
        bot.register_next_step_handler(message, save_message)

    def save_message(message):
        user_id = message.from_user.id

        # üö´ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text and message.text.strip().lower() in ["/exit", "üö´ –æ—Ç–º–µ–Ω–∏—Ç—å"]:
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(
                message.chat.id,
                "‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=main_menu()
            )
            return

        # ‚ö†Ô∏è –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        if not message.text:
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üôè",
                reply_markup=thank_menu()
            )
            return bot.register_next_step_handler(message, save_message)

        text = message.text.strip()
        length = len(text)

        # üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if length < 10:
            bot.send_message(
                message.chat.id,
                f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ ({length}/10). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ üôè",
                reply_markup=thank_menu()
            )
            return bot.register_next_step_handler(message, save_message)

        if length > 400:
            bot.send_message(
                message.chat.id,
                f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({length}/400). "
                "–°–æ–∫—Ä–∞—Ç–∏ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôè",
                reply_markup=thank_menu()
            )
            return bot.register_next_step_handler(message, save_message)

        # üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º—ã—Å–ª–∞
        if not is_thank_message(text):
            user_attempts[user_id] = user_attempts.get(user_id, 0) + 1
            attempts = user_attempts[user_id]
            if attempts >= 3:
                bot.send_message(
                    message.chat.id,
                    "–ü–æ—Ö–æ–∂–µ, –≤–∞–º —Å–ª–æ–∂–Ω–æ —Å–µ–π—á–∞—Å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω–∏–µ.\n"
                    "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞ ‚ù§Ô∏è",
                    reply_markup=main_menu()
                )
                user_attempts[user_id] = 0
                return
            else:
                bot.send_message(
                    message.chat.id,
                    f"‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω–∏–µ.\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üôè (–ü–æ–ø—ã—Ç–∫–∞ {attempts}/3)",
                    reply_markup=thank_menu()
                )
                return bot.register_next_step_handler(message, save_message)

        # üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
        now = time.time()
        if user_id in last_messages:
            last_text = last_messages[user_id]['text']
            last_time = last_messages[user_id]['time']

            if text == last_text:
                bot.send_message(
                    message.chat.id,
                    "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —ç—Ç–æ –∂–µ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω–∏–µ. "
                    "–ü–æ–ø—Ä–æ–±—É–π –Ω–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç üôè",
                    reply_markup=thank_menu()
                )
                return bot.register_next_step_handler(message, save_message)

            if now - last_time < 30:
                remaining = int(30 - (now - last_time))
                bot.send_message(
                    message.chat.id,
                    f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π üôè",
                    reply_markup=thank_menu()
                )
                return bot.register_next_step_handler(message, save_message)

        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω–∏–µ
        save_thank(user_id, message.from_user.full_name or '–ê–Ω–æ–Ω–∏–º', text)
        last_messages[user_id] = {'text': text, 'time': now}
        user_attempts[user_id] = 0

        # ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.send_message(
            message.chat.id,
            f"üíå –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ —Å—Ç–∞–Ω–µ—Ç —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ–º –ë–æ–∂—å–µ–π —Å–ª–∞–≤—ã ‚úùÔ∏è\n"
            f"üìè –î–ª–∏–Ω–∞: {length}/400 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=main_menu()
        )
