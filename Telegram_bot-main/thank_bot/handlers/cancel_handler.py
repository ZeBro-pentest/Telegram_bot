import os
import re
import tempfile
from utils.helpers import main_menu
from config import THANKS_FOLDER

def register_cancel_handlers(bot):
    # ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =====
    def gather_user_entries(user_id):
        """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        all_entries = []
        entries_map = []

        if not os.path.exists(THANKS_FOLDER):
            return all_entries, entries_map

        for fn in sorted(os.listdir(THANKS_FOLDER)):
            if not fn.startswith("thanks_") or not fn.endswith(".txt"):
                continue

            path = os.path.join(THANKS_FOLDER, fn)
            try:
                with open(path, "r", encoding="utf-8") as f:
                    content = f.read()
            except Exception:
                continue

            parts = [x.strip() for x in re.split(r"\n\s*\n", content) if x.strip()]
            for p in parts:
                if re.search(rf"\(id\s*:\s*{user_id}\)", p):
                    all_entries.append(p)
                    entries_map.append((path, p))

        return all_entries, entries_map

    # ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–∏—Å—å–º–æ" =====
    @bot.message_handler(func=lambda m: m.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–∏—Å—å–º–æ")
    def show_user_thanks(message):
        user_id = message.from_user.id
        all_entries, _ = gather_user_entries(user_id)

        if not all_entries:
            return bot.send_message(
                message.chat.id,
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω–∏–π.",
                reply_markup=main_menu()
            )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = ["üìú <b>–í–∞—à–∏ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω–∏—è:</b>\n"]
        for i, entry in enumerate(all_entries, start=1):
            # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞ (–∏–ª–∏ –ø–µ—Ä–≤—ã–µ 80 —Å–∏–º–≤–æ–ª–æ–≤)
            first_line = entry.split("\n", 1)[-1]
            short_text = (first_line[:80] + "‚Ä¶") if len(first_line) > 80 else first_line
            response.append(f"<b>{i}.</b> {short_text}")

        response.append("\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–∏—Å—å–º–æ, –≤–≤–µ–¥–∏—Ç–µ:\n<code>/cancel [–Ω–æ–º–µ—Ä]</code>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /cancel 1")

        bot.send_message(
            message.chat.id,
            "\n".join(response),
            parse_mode="HTML",
            reply_markup=main_menu()
        )

    # ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel =====
    @bot.message_handler(commands=["cancel"])
    def cancel_thank(message):
        m = re.match(r"^/cancel(?:@\S+)?\s+(\d+)\s*$", message.text.strip() if message.text else "")
        if not m:
            return bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n<code>/cancel [–Ω–æ–º–µ—Ä]</code>\n\n–ü—Ä–∏–º–µ—Ä: /cancel 1",
                parse_mode="HTML",
                reply_markup=main_menu()
            )

        index = int(m.group(1))
        user_id = message.from_user.id

        all_entries, entries_map = gather_user_entries(user_id)
        if not all_entries:
            return bot.send_message(
                message.chat.id,
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω–∏–π.",
                reply_markup=main_menu()
            )

        if index < 1 or index > len(all_entries):
            return bot.send_message(
                message.chat.id,
                f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∏—Å—å–º–∞. –£ –≤–∞—Å –≤—Å–µ–≥–æ {len(all_entries)} –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω–∏–π.",
                reply_markup=main_menu()
            )

        # === –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ ===
        target_file, target_entry = entries_map[index - 1]

        try:
            with open(target_file, "r", encoding="utf-8") as f:
                content = f.read()
        except Exception:
            return bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu()
            )

        parts = [x.strip() for x in re.split(r"\n\s*\n", content) if x.strip()]

        removed = False
        for i, p in enumerate(parts):
            if p == target_entry:
                del parts[i]
                removed = True
                break
        if not removed:
            for i, p in enumerate(parts):
                if target_entry in p or p in target_entry:
                    del parts[i]
                    removed = True
                    break

        if not removed:
            return bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∏—Å—å–º–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=main_menu()
            )

        # === –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ ===
        try:
            dirpath = os.path.dirname(target_file)
            fd, tmp_path = tempfile.mkstemp(prefix="tmp_", dir=dirpath, text=True)
            with os.fdopen(fd, "w", encoding="utf-8") as tmpf:
                tmpf.write("\n\n".join(parts) + ("\n\n" if parts else ""))
            os.replace(tmp_path, target_file)
        except Exception:
            return bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞.",
                reply_markup=main_menu()
            )

        bot.send_message(
            message.chat.id,
            f"‚úÖ –í–∞—à–µ –ø–∏—Å—å–º–æ ‚Ññ{index} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=main_menu()
        )
